---
- name: Clone VM(s)
  hosts: local
  gather_facts: false
  vars_files:
    - vmware-config.yml

  tasks:
    - name: Clone virtual machine(s) from template
      local_action:
        module: community.vmware.vmware_guest
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        folder: "/{{ vcenter_folder }}"
        datacenter: "{{ vcenter_datacenter }}"
        cluster: "{{ vcenter_cluster }}"
        name: "{{ item }}"
        state: poweredon
        template: "{{ vm_template }}"
        disk:
          - size_gb: 120
            type: thin
            datastore: "{{ vcenter_datastore }}"
          # Datadisk
          - size_gb: 100
            type: thin
            datastore: "{{ vcenter_datastore }}"
        hardware:
          memory_mb: 32768
          num_cpus: 16
          scsi: paravirtual
          boot_firmware: "efi"
        networks:
          - name: VM Network
            type: static
            ip: "{{ vm_first_ip | ansible.utils.ipmath(srv_idx) }}"
            netmask: "{{ vm_netmask }}"
            gateway: "{{ vm_gateway }}"
        wait_for_ip_address: true
        wait_for_customization: true
        customization:
          dns_servers: "{{ dns_servers }}"
          dns_suffix: "{{ domain }}"
          domain: "{{ domain }}"
      loop: "{{ servers }}"
      loop_control:
        index_var: srv_idx
      register: vm_cloning
      async: 600 # wait up to 10 minutes before giving up
      poll: 0

    - name: Wait for vm clones
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: _jobs_vm_cloning
      retries: 20
      delay: 30
      until: _jobs_vm_cloning.finished
      loop: "{{ vm_cloning.results }}"

- name: Configure VM(s)
  hosts: mapr
  gather_facts: true
  tasks:
    - name: Extend PV
      shell: 'echo -e "resizepart\n3\n100%\n"| sudo parted /dev/sda ---pretend-input-tty'

    - name: Resize PV
      community.general.lvg:
        vg: rl
        pvs: /dev/sda3
        pvresize: true

    - name: Extend and resize root partition
      community.general.lvol:
        vg: rl
        lv: root
        size: +100%FREE
        resizefs: true
    - name: ensure group
      ansible.builtin.group:
        name: "{{ mapr_group }}"
        state: present
        gid: "{{ mapr_gid }}"

    - name: ensure user
      ansible.builtin.user:
        name: "{{ mapr_user }}"
        comment: Ezmeral Admin
        uid: "{{ mapr_uid }}"
        group: "{{ mapr_group }}"
        shell: /bin/bash
        password: "{{ mapr_pass | password_hash('sha512', 'secretsalt') }}"
        update_password: on_create

    - name: enable ssh key for mapr user
      shell: |
        [ -d ~{{ mapr_user }}/.ssh ] || mkdir ~{{ mapr_user }}/.ssh
        [ -f ~{{ mapr_user }}/.ssh/authorized_keys ] || cp ~{{ ansible_user }}/.ssh/authorized_keys ~{{ mapr_user }}/.ssh/authorized_keys
        chown -R {{ mapr_user }} ~{{ mapr_user }}/.ssh
        chmod -R go-rwx ~{{ mapr_user }}/.ssh

    - name: ensure passwordless sudo for admin user
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ mapr_user }}"
        state: present
        owner: root
        group: root
        mode: 0644
        backup: yes
        line: "{{ mapr_user }}  ALL=(ALL) NOPASSWD:ALL"
        create: yes

    - name: enable proxy for yum
      lineinfile:
        path: /etc/yum.conf
        line: "proxy={{ proxy }}"
      when: (proxy is defined) and (proxy|length > 0)

    - name: delete 127.0.1.1
      lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1"
        state: absent
      when: ansible_facts['os_family'] == "Debian"

    - name: ensure fqdn
      shell: |
        ( [ `hostname -f` == `hostname -s` ] && hostnamectl set-hostname {{ ansible_hostname }}.{{ domain }} ) || hostnamectl
      args:
        executable: /bin/bash
